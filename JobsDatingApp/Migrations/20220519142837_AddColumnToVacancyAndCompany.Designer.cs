// <auto-generated />
using System;
using JobsDatingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobsDatingApp.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220519142837_AddColumnToVacancyAndCompany")]
    partial class AddColumnToVacancyAndCompany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JobsDatingApp.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullDesc = "State company Sber",
                            Name = "Сбербанк",
                            PhotoPath = "/Files/CompanyPhoto/Sber.jpg",
                            ShortDesc = "ОАО Сбербанк"
                        },
                        new
                        {
                            Id = 2,
                            FullDesc = "Private company VTB",
                            Name = "VTB",
                            PhotoPath = "/Files/CompanyPhoto/Vtb.jpg",
                            ShortDesc = "ОАО ВТБ"
                        },
                        new
                        {
                            Id = 3,
                            FullDesc = "Private company Sber",
                            Name = "Тинькофф",
                            PhotoPath = "/Files/CompanyPhoto/Tinkoff.jpg",
                            ShortDesc = "ОАО Тинькофф"
                        },
                        new
                        {
                            Id = 4,
                            FullDesc = "Private company Yandex",
                            Name = "Яндекс",
                            PhotoPath = "/Files/CompanyPhoto/Yandex.jpg",
                            ShortDesc = "ОАО Яндекс"
                        });
                });

            modelBuilder.Entity("JobsDatingApp.Data.Models.LastViewedVacancy", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "VacancyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("VacancyId");

                    b.ToTable("LastViewedVacancy");
                });

            modelBuilder.Entity("JobsDatingApp.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6a9f3e8-d8c6-42a2-b934-614d1f8e8b8d"),
                            Email = "test@mail.com",
                            Login = "Bob123",
                            Name = "Bob",
                            Password = "123456"
                        });
                });

            modelBuilder.Entity("JobsDatingApp.Data.Models.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("FullDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Vacancies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            FullDesc = "Сбер сейчас это, крупнейшая цифровая экосистема. Технобренд, объединяющий лучшие мировые практики и современный стек. Сбер работает над созданием экосистемы удобных онлайн сервисов в самых разных сферах. Сейчас в нее входит более 50 компаний. Среди них- онлайн-кинотеатр Okko, сервис доставки еды Delivery Club и многие другие.Мы в поиске Java разработчика_,_ в команду под новый проект- Реализация приложения для внутреннего пользования сотрудников банка.",
                            Name = "Junior Java разработчик",
                            Salary = 50000.0,
                            ShortDesc = "Junior Java разработчик в Сбербанк"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            FullDesc = "Ключевая цель нашего проекта - создание\\сопровождение хранилища данных по операционным расходам. Мы разрабатываем инструменты управления операционными расходами (Dashboards, аналитика, OLAP-Кубы) для внутренних клиентов Группы Сбербанк, с помощью которых наши пользователи смогут повысить эффективность управления операционными расходами. Основной стек: MS SQL, PostgreSQL",
                            Name = "SQL-разработчик",
                            Salary = 100000.0,
                            ShortDesc = "SQL-разработчик в Сбербанк"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 3,
                            FullDesc = "Мы разрабатываем облачную платформу виртуальных рабочих мест TWork.Платформа дает возможность сотрудникам компании работать удаленно, без привязки к офисному рабочему месту.Внутри платформы мы их обучаем и мотивируем, организуем рабочие процессы и общение, контроль качества и геймификацию.Сегодня на платформе работает 10 000 удаленных сотрудников в режиме 24/7 и в пике создают нагрузку 1500 RPS + 5000 realtime соединений, обрабатывая больше 1.5 миллиона заявок в сутки.Ищем нового игрока в нашу команду, готового учиться, развиваться с желанием создавать надежные, оптимальные и смелые технические решения. Мы предлагаем возможность удалённой работы и гибкого планирования своего времени.",
                            Name = "Разработчик Full-Stack .NET",
                            Salary = 45000.0,
                            ShortDesc = "Разработчик Full-Stack .NET в Тинькофф"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            FullDesc = "Обязанности:администрирование сервисов облачной платформы;настраивание и поддержка CI/ CD;автоматизация и документирование DevOps процессов;участие в разработке архитектурных решений;участие в создании стендов;исследование / тестирование возможности использования технологий / решений / оборудования в существующей и разрабатываемой инфраструктуре облачной платформы; ",
                            Name = "Ведущий инженер DevOps Cloud",
                            Salary = 110000.0,
                            ShortDesc = "Ведущий инженер DevOps Cloud в ВТБ"
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 4,
                            FullDesc = "Требуемый опыт работы: 1–3 года Полная занятость, гибкий график Яндекс.Практикум — сервис онлайн-образования, который выходит на рынок США и Европы. Мы помогаем людям расти — на работе и в жизни. Наша цель — построить на платформе Практикума универсальный конструктор образовательного опыта. В нашей команде десятки специалистов из разных областей, и мы постоянно растем. Занимаемся внутренними сервисами Практикума: создаем удобные инструменты и сами ими пользуемся, разрабатываем курсы, организуем спринты. Мы получаем обратную связь напрямую от пользователей-коллег и точно знаем, что и зачем делаем. Если вы считаете, что каждый может научиться новому, — присоединяйтесь к нашей команде.",
                            Name = "Разработчик бэкенда",
                            Salary = 110000.0,
                            ShortDesc = "Разработчик бэкенда в Яндекс.Практикум"
                        });
                });

            modelBuilder.Entity("UserVacancy", b =>
                {
                    b.Property<Guid>("LikedUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LikedVacanciesId")
                        .HasColumnType("int");

                    b.HasKey("LikedUsersId", "LikedVacanciesId");

                    b.HasIndex("LikedVacanciesId");

                    b.ToTable("UserVacancy");
                });

            modelBuilder.Entity("JobsDatingApp.Data.Models.LastViewedVacancy", b =>
                {
                    b.HasOne("JobsDatingApp.Data.Models.User", "User")
                        .WithOne("LastViewedVacancy")
                        .HasForeignKey("JobsDatingApp.Data.Models.LastViewedVacancy", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobsDatingApp.Data.Models.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("JobsDatingApp.Data.Models.Vacancy", b =>
                {
                    b.HasOne("JobsDatingApp.Data.Models.Company", "Company")
                        .WithMany("Vacancies")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("UserVacancy", b =>
                {
                    b.HasOne("JobsDatingApp.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("LikedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobsDatingApp.Data.Models.Vacancy", null)
                        .WithMany()
                        .HasForeignKey("LikedVacanciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobsDatingApp.Data.Models.Company", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("JobsDatingApp.Data.Models.User", b =>
                {
                    b.Navigation("LastViewedVacancy");
                });
#pragma warning restore 612, 618
        }
    }
}
